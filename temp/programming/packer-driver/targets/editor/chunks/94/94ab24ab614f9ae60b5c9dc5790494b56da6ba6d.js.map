{"version":3,"sources":["file:///Users/vladislavkvinto/StickMan/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","input","Input","Prefab","director","instantiate","RigidBody2D","Label","UITransform","v3","Vec3","Sprite","Tween","ccclass","property","GameManager","isGameStarted","isGrowingBridge","score","currentBridge","currentBridgeHeight","bridgeGrowthSpeed","currentPlatform","nextPlatform","start","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","generateInitialPlatforms","generateBridge","scheduleOnce","setRotationFromEuler","goNextPlatform","console","log","currentPlatformTransform","getComponent","nextPlatformTransform","currentPlatformPos","getPosition","nextPlatformPos","currentPlatwormWidth","contentSize","width","nextPlatwormWidth","distanceBetweenPlatforms","Math","abs","x","bridgeActualLength","height","scale","y","player","setPosition","scoreLabel","string","moveCamera","generateNextPlatform","resetBridge","targetX","canvasNode","getScene","getChildByName","cameraNode","uiHolderNode","currentPosition","smoothMove","to","position","z","easing","smoothMoveUI","warn","setScale","canvas","newPlatform","platform","setParent","platformWidth","xRandom","random","bridge","playerPos","playerHeight","anchorY","rigidBody","addComponent","type","platformInstance","node","addChild","sprite","spriteFrame","rect","update","deltaTime"],"mappings":"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","sourcesContent":["import {\n    _decorator, Component, Node, input, Input, Prefab, director, instantiate, RigidBody2D, Vec2,\n    Label, UITransform, v3, Vec3, Sprite, Tween\n} from 'cc';\n\nconst {ccclass, property} = _decorator;\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n\n    @property(Node)\n    player: Node;\n\n    @property(Prefab)\n    platform: Prefab;\n\n    @property(Node)\n    failureWindow: Node;\n\n    @property(Prefab)\n    bridge: Prefab;  // Prefab для моста\n\n    @property(Label)\n    scoreLabel: Label;\n\n    isGameStarted = false;\n    isGrowingBridge = false;\n    score = 0;\n    currentBridge: Node;\n    currentBridgeHeight = 0;\n    bridgeGrowthSpeed = 10;\n\n    currentPlatform: Node;\n    nextPlatform: Node;\n\n    start() {\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.generateInitialPlatforms();\n        // Включаем физическую систему, если она будет использоваться\n        // PhysicsSystem2D.instance.enable = true;\n        // PhysicsSystem2D.instance.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n    }\n\n    onTouchStart() {\n        if (!this.isGameStarted) {\n            this.isGameStarted = true;\n        }\n        this.generateBridge();\n    }\n\n    onTouchEnd() {\n        this.isGrowingBridge = false;\n        if (this.currentBridge) {\n            this.scheduleOnce(() => {\n                this.currentBridge.setRotationFromEuler(0, 0, -90);\n                // Если нужно управление физикой\n                // const rigidBody = this.currentBridge.getComponent(RigidBody2D) || this.currentBridge.addComponent(RigidBody2D);\n                // rigidBody.type = RigidBody2D.Type.Static;\n\n                this.scheduleOnce(() => {\n                    this.goNextPlatform();\n                }, 0.5);\n            }, 0.5);\n        }\n    }\n\n    private goNextPlatform() {\n        if (!this.currentPlatform || !this.nextPlatform || !this.currentBridge) {\n            console.log(\"Некоторые элементы отсутствуют.\");\n            return;\n        }\n\n        const currentPlatformTransform = this.currentPlatform.getComponent(UITransform);\n        const nextPlatformTransform = this.nextPlatform.getComponent(UITransform);\n\n        if (!currentPlatformTransform || !nextPlatformTransform) {\n            console.log(\"Не удалось получить компоненты UITransform.\");\n            return;\n        }\n\n        const currentPlatformPos = this.currentPlatform.getPosition();\n        const nextPlatformPos = this.nextPlatform.getPosition();\n\n        const currentPlatwormWidth = currentPlatformTransform.contentSize.width;\n        const nextPlatwormWidth = nextPlatformTransform.contentSize.width;\n\n        const distanceBetweenPlatforms = Math.abs(nextPlatformPos.x - (currentPlatformPos.x + currentPlatwormWidth));\n\n        const bridgeActualLength = this.currentBridge.getComponent(UITransform).contentSize.height * this.currentBridge.scale.y;\n\n        // console.log(`Current platform position: ${currentPlatformPos.x}`);\n        // console.log(`Next platform position: ${nextPlatformPos.x}`);\n        // console.log(`Platform width: ${currentPlatwormWidth}`);\n        // console.log(`Bridge length: ${bridgeActualLength}`);\n        // console.log(`Distance between platforms: ${distanceBetweenPlatforms}`);\n\n        if (bridgeActualLength > distanceBetweenPlatforms && bridgeActualLength < Math.abs(distanceBetweenPlatforms + nextPlatwormWidth)) {\n            this.player.setPosition(nextPlatformPos.x, this.player.getPosition().y);\n            this.score += 10;\n            this.scoreLabel.string = `Score: ${this.score}`;\n            console.log(\"Successful transition to the next platform.\");\n\n            this.currentPlatform = this.nextPlatform;\n\n            this.moveCamera(nextPlatformPos.x + currentPlatwormWidth);\n\n            this.generateNextPlatform();\n\n            // Обнуление моста после успешного перехода\n            this.resetBridge();\n        } else {\n            // this.failureWindow.active = true;\n        }\n    }\n\n    private moveCamera(targetX: number) {\n        const canvasNode = director.getScene().getChildByName(\"Canvas\");\n        const cameraNode = canvasNode.getChildByName(\"Camera\");\n        const uiHolderNode = canvasNode.getChildByName(\"UIHolder\"); // Убедитесь, что узел с таким именем существует\n\n        if (canvasNode && cameraNode && uiHolderNode) {\n            const currentPosition = cameraNode.getPosition();\n            const smoothMove = new Tween(cameraNode)\n                .to(1, { position: new Vec3(targetX, currentPosition.y, currentPosition.z) }, { easing: 'smooth' })\n                .start();\n\n            const smoothMoveUI = new Tween(uiHolderNode)\n                .to(1, { position: new Vec3(targetX, uiHolderNode.getPosition().y, uiHolderNode.getPosition().z) }, { easing: 'smooth' })\n                .start();\n        } else {\n            console.warn(\"Не найдены нужные узлы на сцене!\");\n        }\n    }\n\n\n\n\n    private resetBridge() {\n        if (this.currentBridge) {\n            // Сброс параметров моста\n            this.currentBridge.setScale(v3(1, 1, 1)); // Сброс масштаба\n            this.currentBridgeHeight = 0; // Сброс высоты моста\n\n            // Опционально можно переместить мост вне видимой зоны или деактивировать его\n            this.currentBridge.setPosition(this.player.getPosition().x, -1000); // Пример перемещения вне экрана\n        }\n    }\n\n\n    private generateNextPlatform() {\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        const newPlatform = instantiate(this.platform);\n        newPlatform.setParent(canvas);\n\n        // Вычисляем случайное расстояние для новой платформы\n        const platformWidth = this.currentPlatform.getComponent(UITransform).contentSize.width;\n        const xRandom = Math.random() * 200 + platformWidth;  // Рандомное расстояние до следующей платформы\n\n        // Устанавливаем позицию для новой платформы\n        newPlatform.setPosition(this.currentPlatform.getPosition().x + xRandom, -590);\n\n        // Обновляем ссылку на следующую платформу\n        this.nextPlatform = newPlatform;\n    }\n\n\n\n\n    private generateBridge() {\n        this.isGrowingBridge = true;\n        this.currentBridge = instantiate(this.bridge);\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        this.currentBridge.setParent(canvas);\n\n        const playerPos = this.player.getPosition();\n        const playerHeight = this.player.getComponent(UITransform).height;\n        this.currentBridge.setPosition(playerPos.x + playerHeight * 7 / 9, playerPos.y - playerHeight / 2, 0);\n        this.currentBridge.getComponent(UITransform).anchorY = 0;\n        this.currentBridge.setScale(v3(1, 1, 1)); // Установите начальный масштаб в 1\n\n        const rigidBody = this.currentBridge.getComponent(RigidBody2D) || this.currentBridge.addComponent(RigidBody2D);\n        rigidBody.type = 0;\n    }\n\n    generateInitialPlatforms() {\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        const platformInstance: Node = instantiate(this.platform);\n        this.node.addChild(platformInstance);\n        const sprite: Sprite | null = platformInstance.getComponent(Sprite);\n        const platformWidth = sprite.spriteFrame.rect.width;\n\n        let xRandom = Math.random() * 200 + platformWidth;  // Даем небольшой случайный разброс для платформ\n\n        this.currentPlatform = instantiate(this.platform);\n        this.currentPlatform.setParent(canvas);\n        this.currentPlatform.setPosition(-350, -590);\n\n        this.nextPlatform = instantiate(this.platform);\n        this.nextPlatform.setParent(canvas);\n        this.nextPlatform.setPosition(this.currentPlatform.getPosition().x + xRandom, -590);\n    }\n\n    update(deltaTime: number) {\n        if (this.isGrowingBridge && this.currentBridge) {\n            this.currentBridgeHeight += this.bridgeGrowthSpeed * deltaTime;\n            this.currentBridge.setScale(v3(1, this.currentBridgeHeight, 1));\n        }\n    }\n\n}\n"]}