{"version":3,"sources":["file:///Users/vladislavkvinto/StickMan/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","input","Input","Prefab","director","instantiate","RigidBody2D","Label","UITransform","v3","Vec3","Tween","AudioSource","AudioClip","ccclass","property","GameManager","isGameStarted","isGrowingBridge","score","scoreArray","currentBridge","currentBridgeHeight","bridgeGrowthSpeed","currentPlatform","nextPlatform","start","initializeGame","playSoundEffect","backgroundMusic","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","generateInitialPlatforms","failureWindow","active","generateBridge","scheduleOnce","setRotationFromEuler","goNextPlatform","currentPlatformTransform","getComponent","nextPlatformTransform","currentPlatformPos","getPosition","nextPlatformPos","currentPlatformWidth","contentSize","width","nextPlatformWidth","distanceBetweenPlatforms","Math","abs","x","bridgeActualLength","height","scale","y","playerNewX","playerCurrentY","player","to","position","easing","call","resetBridge","winSound","scoreLabel","string","moveCamera","generateNextPlatform","push","fallDawn","playerCurrentX","playerX","bridgeFallSound","sortedArray","sort","n1","n2","bestScoreLabel","targetX","canvasNode","getScene","getChildByName","cameraNode","uiHolderNode","failureWindowNode","currentPosition","smoothMove","z","smoothMoveUI","failureWindowNodeUI","console","warn","canvas","children","slice","child","name","removeChild","destroy","setScale","error","newPlatform","platform","setParent","platformHeight","xRandom","random","setPosition","point","bridge","playerPos","playerHeight","anchorY","rigidBody","addComponent","type","platformInstance","node","addChild","update","deltaTime","restartGame","clearPlatforms","initialPlayerPosition","sound","audioSource","clip","play"],"mappings":"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","sourcesContent":["import {\n    _decorator, Component, Node, input, Input, Prefab, director, instantiate, RigidBody2D,\n    Label, UITransform, v3, Vec3, Tween, AudioSource, AudioClip\n} from 'cc';\n\nconst {ccclass, property} = _decorator;\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property(Node) player: Node;\n    @property(Prefab) platform: Prefab;\n    @property(Node) failureWindow: Node;\n    @property(Prefab) bridge: Prefab;\n    @property(Prefab) point: Prefab;\n    @property(Label) scoreLabel: Label;\n    @property(Label) bestScoreLabel: Label;\n    @property(AudioClip) backgroundMusic: AudioClip;\n    @property(AudioClip) bridgeFallSound: AudioClip;\n    @property(AudioClip) winSound: AudioClip;\n\n    private isGameStarted = false;\n    private isGrowingBridge = false;\n    private score = 0;\n    private scoreArray: number[] = [];\n    private currentBridge: Node | null = null;\n    private currentBridgeHeight = 0;\n    private bridgeGrowthSpeed = 10;\n    private currentPlatform: Node | null = null;\n    private nextPlatform: Node | null = null;\n\n    start() {\n        this.initializeGame();\n\n    }\n\n    initializeGame() {\n        this.playSoundEffect(this.backgroundMusic);\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.generateInitialPlatforms();\n        this.failureWindow.active = false;\n    }\n\n    onTouchStart() {\n        if (!this.isGameStarted) {\n            this.isGameStarted = true;\n        }\n        this.generateBridge();\n    }\n\n    onTouchEnd() {\n        this.isGrowingBridge = false;\n        if (this.currentBridge) {\n            this.scheduleOnce(() => {\n                this.currentBridge.setRotationFromEuler(0, 0, -90);\n                this.scheduleOnce(() => {\n                    this.goNextPlatform();\n                }, 0.5);\n            }, 0.5);\n        }\n    }\n\n    private goNextPlatform() {\n        const currentPlatformTransform = this.currentPlatform.getComponent(UITransform);\n        const nextPlatformTransform = this.nextPlatform.getComponent(UITransform);\n\n        const currentPlatformPos = this.currentPlatform.getPosition();\n        const nextPlatformPos = this.nextPlatform.getPosition();\n\n        const currentPlatformWidth = currentPlatformTransform.contentSize.width;\n        const nextPlatformWidth = nextPlatformTransform.contentSize.width;\n\n        const distanceBetweenPlatforms = Math.abs(nextPlatformPos.x - (currentPlatformPos.x + currentPlatformWidth));\n        const bridgeActualLength = this.currentBridge.getComponent(UITransform).contentSize.height * this.currentBridge.scale.y;\n\n        if (bridgeActualLength > distanceBetweenPlatforms + 10 && bridgeActualLength < Math.abs(distanceBetweenPlatforms + nextPlatformWidth)) {\n            const playerNewX = nextPlatformPos.x;\n            const playerCurrentY = this.player.getPosition().y;\n\n            new Tween(this.player)\n                .to(1, {position: new Vec3(playerNewX, playerCurrentY, 0)}, {easing: 'smooth'})\n                .call(() => {\n                    this.resetBridge();\n                    this.score += 1;\n                    if (bridgeActualLength > Math.abs(distanceBetweenPlatforms + nextPlatformWidth / 2 - 10) && bridgeActualLength < Math.abs(distanceBetweenPlatforms + nextPlatformWidth / 2 + 15)) {\n                        this.score += 1;\n                    }\n                    this.playSoundEffect(this.winSound);\n                    this.scoreLabel.string = `Score: ${this.score}`;\n                })\n                .start();\n\n            this.currentPlatform = this.nextPlatform;\n            this.moveCamera(playerNewX + currentPlatformWidth);\n            this.generateNextPlatform();\n        } else {\n            this.scoreArray.push(this.score);\n            this.fallDawn();\n        }\n    }\n\n\n    private fallDawn() {\n        const bridgeActualLength = this.currentBridge.getComponent(UITransform).contentSize.height * this.currentBridge.scale.y;\n        const playerCurrentY = this.player.getPosition().y;\n        const playerCurrentX = this.player.getPosition().x;\n        const playerX = playerCurrentX + bridgeActualLength + this.player.getComponent(UITransform).width;\n        new Tween(this.player)\n            .to(1, {position: new Vec3(playerX, playerCurrentY, 0)}, {easing: 'smooth'})\n            .call(() => {\n                this.playSoundEffect(this.bridgeFallSound);\n                new Tween(this.player)\n                    .to(0.1, {position: new Vec3(playerCurrentX, -1000, 0)}, {easing: 'smooth'})\n                    .start();\n\n                this.currentBridge.setRotationFromEuler(0, 0, -180);\n\n                this.scoreArray.push(this.score);\n                var sortedArray: number[] = this.scoreArray.sort((n1, n2) => n2 - n1);\n\n                this.bestScoreLabel.string = `Best score: ${sortedArray[0]}`;\n                this.failureWindow.active = true;\n            })\n            .start();\n\n    }\n\n    private moveCamera(targetX: number) {\n        const canvasNode = director.getScene().getChildByName(\"Canvas\");\n        const cameraNode = canvasNode.getChildByName(\"Camera\");\n        const uiHolderNode = canvasNode.getChildByName(\"UIHolder\");\n        const failureWindowNode = canvasNode.getChildByName(\"FailureWindow\");\n\n        if (canvasNode && cameraNode && uiHolderNode) {\n            const currentPosition = cameraNode.getPosition();\n            const smoothMove = new Tween(cameraNode)\n                .to(1, {position: new Vec3(targetX, currentPosition.y, currentPosition.z)}, {easing: 'smooth'})\n                .start();\n\n            const smoothMoveUI = new Tween(uiHolderNode)\n                .to(1, {position: new Vec3(targetX, uiHolderNode.getPosition().y, uiHolderNode.getPosition().z)}, {easing: 'smooth'})\n                .start();\n\n            const failureWindowNodeUI = new Tween(failureWindowNode)\n                .to(1, {position: new Vec3(targetX, failureWindowNode.getPosition().y, failureWindowNode.getPosition().z)}, {easing: 'smooth'})\n                .start();\n        } else {\n            console.warn(\"Не найдены нужные узлы на сцене!\");\n        }\n    }\n\n    private resetBridge() {\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n\n        if (canvas) {\n            let children = canvas.children.slice();\n            for (let child of children) {\n                if (child.name === \"Bridge\") {\n                    canvas.removeChild(child);\n                    child.destroy();\n                    this.currentBridge.setScale(v3(1, 1, 1));\n                    this.currentBridgeHeight = 0;\n                }\n            }\n        } else {\n            console.error(\"Canvas not found in the scene!\");\n        }\n    }\n\n    private generateNextPlatform() {\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        const newPlatform = instantiate(this.platform);\n        newPlatform.setParent(canvas);\n\n        const platformHeight = this.currentPlatform.getComponent(UITransform).contentSize.height;\n        const xRandom = Math.random() * (400 - 300) + 300;\n\n        newPlatform.setPosition(this.currentPlatform.getPosition().x + xRandom, -590);\n\n        const point = instantiate(this.point);\n        point.setParent(newPlatform);\n        point.setPosition(0, platformHeight / 2 + point.getComponent(UITransform).contentSize.height / 2 - 10, 0);\n\n        this.nextPlatform = newPlatform;\n    }\n\n    private generateBridge() {\n        this.isGrowingBridge = true;\n        this.currentBridge = instantiate(this.bridge);\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        this.currentBridge.setParent(canvas);\n\n        const playerPos = this.player.getPosition();\n        const playerHeight = this.player.getComponent(UITransform).height;\n        this.currentBridge.setPosition(playerPos.x + playerHeight * 4 / 5, playerPos.y - playerHeight / 2, 0);\n        this.currentBridge.getComponent(UITransform).anchorY = 0;\n        this.currentBridge.setScale(v3(1, 1, 1));\n\n        const rigidBody = this.currentBridge.getComponent(RigidBody2D) || this.currentBridge.addComponent(RigidBody2D);\n        rigidBody.type = 0;\n    }\n\n\n    private generateInitialPlatforms() {\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        const platformInstance: Node = instantiate(this.platform);\n        this.node.addChild(platformInstance);\n\n        this.currentPlatform = instantiate(this.platform);\n        this.currentPlatform.setParent(canvas);\n        this.currentPlatform.setPosition(-350, -590);\n\n        this.generateNextPlatform();\n\n\n    }\n\n    update(deltaTime: number) {\n        if (this.isGrowingBridge && this.currentBridge) {\n            this.currentBridgeHeight += this.bridgeGrowthSpeed * 2 * deltaTime;\n            this.currentBridge.setScale(v3(1, this.currentBridgeHeight, 1));\n        }\n    }\n\n    public restartGame() {\n        this.resetBridge();\n        this.score = 0;\n        this.scoreLabel.string = `Score: ${this.score}`;\n\n        this.clearPlatforms();\n\n        this.generateInitialPlatforms();\n\n        const initialPlayerPosition = new Vec3(-350, -340, 0);\n        this.player.setPosition(initialPlayerPosition);\n\n        this.moveCamera(0);\n\n        this.failureWindow.active = false;\n    }\n\n    private clearPlatforms() {\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        if (canvas) {\n            let children = canvas.children.slice();\n            for (let child of children) {\n                if (child.name === \"Platform\") {\n                    canvas.removeChild(child);\n                    child.destroy();\n                }\n            }\n        } else {\n            console.error(\"Canvas not found in the scene!\");\n        }\n    }\n\n    private playSoundEffect(sound: AudioClip) {\n        const audioSource = this.node.addComponent(AudioSource);\n        audioSource.clip = sound;\n        audioSource.play();\n    }\n\n}\n"]}